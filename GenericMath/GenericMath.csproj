<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup Label="Main">
        <AssemblyName>CodeChops.GenericMath</AssemblyName>
        <RootNamespace>CodeChops.GenericMath</RootNamespace>
        <TargetFramework>net6.0</TargetFramework>
        <LangVersion>10</LangVersion>
        <Nullable>enable</Nullable>
        <ImplicitUsings>enable</ImplicitUsings>
        <EnablePreviewFeatures>true</EnablePreviewFeatures>
    </PropertyGroup>

    <PropertyGroup Label="Package">
        <Version>2.0.7</Version>
        <PackageReleaseNotes>Change convert changetype to IConvertable.ToType.</PackageReleaseNotes>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <Title>CodeChops.GenericMath</Title>
        <Description>
            This package provides a way to perfrom math functions over 'generic integrals' as C# currently does not support this.
            The C# team is working on a way to have support for generic math natively, using abstract static interfaces.
            Unfortunately, this is still in preview: https://devblogs.microsoft.com/dotnet/preview-features-in-net-6-generic-math/

            The code of this package is adapted from:
            https://codereview.stackexchange.com/questions/26022/generic-calculator-and-generic-number
        </Description>
        <PackageId>CodeChops.GenericMath</PackageId>
        <PackageProjectUrl>https://github.com/code-chops/GenericMath</PackageProjectUrl>
        <PackageTags>CodeChops;CodeChops.GenericMath;CodeChops.GenericMath;GenericMaths;GenericMath;Generic maths;Generic math;Generic integrals;Generic integral;Generic calculation;</PackageTags>
        <PublishRepositoryUrl>true</PublishRepositoryUrl>
        <RepositoryUrl>https://github.com/code-chops/GenericMath</RepositoryUrl>
        <RepositoryType>Git</RepositoryType>
        <Authors>CodeChops (@Code-Chops), Max Bergman</Authors>
        <Company>CodeChops</Company>
        <PackageIcon>icon.png</PackageIcon>
        <PackageLicenseFile>LICENSE</PackageLicenseFile>
        <Copyright>Copyright (c) CodeChops $([System.DateTime]::Now.ToString(yyyy))</Copyright>
    </PropertyGroup>

    <!-- Creates local nuget packages if in release mode and environment variable LocalNuGetPackagesFolder is configured -->
    <Target Name="AddNugetPackage" AfterTargets="Pack" Condition="'$(Configuration)' == 'Release' AND '$(LocalNuGetPackagesFolder)' != null">
        <Exec Command="$(LocalNuGetPackagesFolder)\nuget.exe add $(OutputPath)..\$(PackageId).$(PackageVersion).nupkg -source $(LocalNuGetPackagesFolder)" />
    </Target>

    <ItemGroup Label="PackageAssets">
        <None Include="Properties\LICENSE" Pack="true" PackagePath="" />
        <None Include="Properties\icon.png" Pack="true" Visible="true" PackagePath="" />
    </ItemGroup>

    <ItemGroup Label="InternalsVisibleTo">
        <InternalsVisibleTo Include="$(AssemblyName).UnitTests" />
        <InternalsVisibleTo Include="$(AssemblyName).IntegrationTests" />
    </ItemGroup>

    <ItemGroup Label="PackageReferences">
        <PackageReference Include="CodeChops.DomainDrivenDesign.DomainModeling" Version="0.20.0" />
        <PackageReference Include="System.Text.Json" Version="6.0.5" />
    </ItemGroup>

</Project>	